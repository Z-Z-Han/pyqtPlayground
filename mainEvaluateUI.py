# -*- coding: utf-8 -*-
# Do not edit this file unless you know what you are doing.

from PyQt5.Qt import *
from PyQt5.QtChart import QChart
from entry import *
from PieChart import *
import sys


class MyMainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyMainWindow, self).__init__(parent)
        # breaker parameter
        self.capacitor_weight = 0.000
        self.rectifier_weight = 0.000
        self.thyristor_weight = 0.000
        self.radiator_weight = 0.000
        self.inductance_weight = 0.000
        self.breaker_weight = 0.000
        # converter parameter
        self.capacitor1_weight = 0
        self.capacitor2_weight = 0
        self.inductance1_weight = 0
        self.radiator1_weight = 0
        self.converter_weight = 0

        self.setupUi(self)
        # page_0
        self.chart0 = QChart()
        self.graphicsView.setChart(self.chart0)
        self.graphicsView.setRenderHint(QPainter.Antialiasing)
        self.pushButton.clicked.connect(self.calculateBreakerComplexly)
        self.pushButton.clicked.connect(self.showDataPage0)
        self.pushButton.clicked.connect(self.showPiePage0)
        # page_1
        self.chart1 = QChart()
        self.graphicsView_2.setChart(self.chart1)
        self.graphicsView_2.setRenderHint(QPainter.Antialiasing)
        self.pushButton_2.clicked.connect(self.calculateBreakerSimply)
        self.pushButton_2.clicked.connect(self.showDataPage1)
        self.pushButton_2.clicked.connect(self.showPiePage1)
        # page_2
        self.chart2 = QChart()
        self.graphicsView_3.setChart(self.chart2)
        self.graphicsView_3.setRenderHint(QPainter.Antialiasing)
        self.pushButton_3.clicked.connect(self.calculateConverterComplexly)
        self.pushButton_3.clicked.connect(self.showDataPage2)
        self.pushButton_3.clicked.connect(self.showPiePage2)
        # page_3
        self.chart3 = QChart()
        self.graphicsView_5.setChart(self.chart3)
        self.graphicsView_5.setRenderHint(QPainter.Antialiasing)
        self.pushButton_7.clicked.connect(self.calculateConverterSimply)
        self.pushButton_7.clicked.connect(self.showDataPage3)
        self.pushButton_7.clicked.connect(self.showPiePage3)



    def showDataPage0(self):
        self.tableWidget.setRowCount(2)
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setVerticalHeaderLabels(['重量', '占比'])
        self.tableWidget.setHorizontalHeaderLabels(['电容', '整流管', '晶闸管', '散热器', '电感'])
        self.addBreakerTableItem(self.tableWidget)
        self.tableWidget.resizeColumnsToContents()
        self.tableWidget.resizeRowsToContents()
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

    def showDataPage1(self):
        self.tableWidget_2.setRowCount(2)
        self.tableWidget_2.setColumnCount(5)
        self.tableWidget_2.setVerticalHeaderLabels(['重量', '占比'])
        self.tableWidget_2.setHorizontalHeaderLabels(['电容', '整流管', '晶闸管', '散热器', '电感'])
        self.addBreakerTableItem(self.tableWidget_2)
        self.tableWidget_2.resizeColumnsToContents()
        self.tableWidget_2.resizeRowsToContents()
        self.tableWidget_2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

    def showDataPage2(self):
        self.tableWidget_3.setRowCount(2)
        self.tableWidget_3.setColumnCount(4)
        self.tableWidget_3.setVerticalHeaderLabels(['重量', '占比'])
        self.tableWidget_3.setHorizontalHeaderLabels(['电容1', '电容2', '电感', '散热器'])
        self.addConverterTableItem(self.tableWidget_3)
        self.tableWidget_3.resizeColumnsToContents()
        self.tableWidget_3.resizeRowsToContents()
        self.tableWidget_3.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

    def showDataPage3(self):
        self.tableWidget_4.setRowCount(2)
        self.tableWidget_4.setColumnCount(4)
        self.tableWidget_4.setVerticalHeaderLabels(['重量', '占比'])
        self.tableWidget_4.setHorizontalHeaderLabels(['电容1', '电容2', '电感', '散热器'])
        self.addConverterTableItem(self.tableWidget_4)
        self.tableWidget_4.resizeColumnsToContents()
        self.tableWidget_4.resizeRowsToContents()
        self.tableWidget_4.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)


    def addBreakerTableItem(self, tableWidget):
        item00 = QTableWidgetItem(str(self.capacitor_weight) + 'kg')
        tableWidget.setItem(0, 0, item00)
        item01 = QTableWidgetItem(str(self.rectifier_weight) + 'kg')
        tableWidget.setItem(0, 1, item01)
        item02 = QTableWidgetItem(str(self.thyristor_weight) + 'kg')
        tableWidget.setItem(0, 2, item02)
        item03 = QTableWidgetItem(str(self.radiator_weight) + 'kg')
        tableWidget.setItem(0, 3, item03)
        item04 = QTableWidgetItem(str(self.inductance_weight) + 'kg')
        tableWidget.setItem(0, 4, item04)
        item10 = QTableWidgetItem('{:.2f}%'.format(2 * self.capacitor_weight / self.breaker_weight * 100))
        tableWidget.setItem(1, 0, item10)
        item11 = QTableWidgetItem('{:.2f}%'.format(2 * self.rectifier_weight / self.breaker_weight * 100))
        tableWidget.setItem(1, 1, item11)
        item12 = QTableWidgetItem('{:.2f}%'.format(self.thyristor_weight / self.breaker_weight * 100))
        tableWidget.setItem(1, 2, item12)
        item13 = QTableWidgetItem('{:.2f}%'.format(3 * self.radiator_weight / self.breaker_weight * 100))
        tableWidget.setItem(1, 3, item13)
        item14 = QTableWidgetItem('{:.2f}%'.format(2 * self.inductance_weight / self.breaker_weight * 100))
        tableWidget.setItem(1, 4, item14)

    def addConverterTableItem(self, tableWidget):
        item00 = QTableWidgetItem(str(self.capacitor1_weight) + 'kg')
        tableWidget.setItem(0, 0, item00)
        item01 = QTableWidgetItem(str(self.capacitor2_weight) + 'kg')
        tableWidget.setItem(0, 1, item01)
        item02 = QTableWidgetItem(str(self.inductance1_weight) + 'kg')
        tableWidget.setItem(0, 2, item02)
        item03 = QTableWidgetItem(str(self.radiator1_weight) + 'kg')
        tableWidget.setItem(0, 3, item03)
        item10 = QTableWidgetItem('{:.2f}%'.format(2 * self.capacitor1_weight / self.converter_weight * 100))
        tableWidget.setItem(1, 0, item10)
        item11 = QTableWidgetItem('{:.2f}%'.format(2 * self.capacitor2_weight / self.converter_weight * 100))
        tableWidget.setItem(1, 1, item11)
        item12 = QTableWidgetItem('{:.2f}%'.format(self.inductance1_weight / self.converter_weight * 100))
        tableWidget.setItem(1, 2, item12)
        item13 = QTableWidgetItem('{:.2f}%'.format(3 * self.radiator1_weight / self.converter_weight * 100))
        tableWidget.setItem(1, 3, item13)

    def showPiePage0(self):
        self.chart0.removeAllSeries()
        self.chart0.addSeries(self.getBreakerSeries())

    def showPiePage1(self):
        self.chart1.removeAllSeries()
        self.chart1.addSeries(self.getBreakerSeries())

    def showPiePage2(self):
        self.chart2.removeAllSeries()
        self.chart2.addSeries(self.getConverterSeries())

    def showPiePage3(self):
        self.chart3.removeAllSeries()
        self.chart3.addSeries(self.getConverterSeries())



    def getBreakerSeries(self):
        series = QPieSeries()
        slice0 = series.append('电容', self.capacitor_weight / self.breaker_weight)
        series.append('整流管', self.rectifier_weight / self.breaker_weight)
        series.append('晶闸管', self.thyristor_weight / self.breaker_weight)
        series.append('散热器', self.radiator_weight / self.breaker_weight)
        series.append('电感', self.inductance_weight / self.breaker_weight)
        series.setLabelsVisible()
        series.setPieSize(0.7)
        slice0.setLabelVisible()
        slice0.setExploded()
        # 设置第一块颜色
        slice0.setColor(QColor(255, 0, 0, 100))
        return series

    def getConverterSeries(self):
        series = QPieSeries()
        slice0 = series.append('电容1', self.capacitor1_weight / self.converter_weight)
        series.append('电容2', self.capacitor2_weight / self.converter_weight)
        series.append('电感', self.inductance1_weight / self.converter_weight)
        series.append('散热器', self.radiator1_weight / self.converter_weight)
        series.setLabelsVisible()
        series.setPieSize(0.7)
        slice0.setLabelVisible()
        slice0.setExploded()
        # 设置第一块颜色
        slice0.setColor(QColor(255, 0, 0, 100))
        return series


    def calculateBreakerComplexly(self):
        k1 = 1
        k2 = 1
        k3 = 1
        k4 = 1
        k5 = 1
        capacitor_capacity = float(self.cFLineEdit.text())
        capacitor_voltage = float(self.uVLineEdit.text())
        capacitor_diameter = float(self.dMmLineEdit.text())
        capacitor_length = float(self.lMLineEdit.text())
        self.capacitor_weight = round((
                                              -0.0094 * capacitor_voltage - 0.0204 * capacitor_capacity + 0.6208 * capacitor_diameter + 0.5524 * capacitor_length - 7.9299) * 10 ** (
                                          -3), 2)
        self.capacitor_weight = abs(self.capacitor_weight)

        rectifier_current = float(self.iALineEdit_2.text())
        rectifier_diameter = float(self.dMmLineEdit_2.text())
        rectifier_length = float(self.LineEdit.text())
        self.rectifier_weight = round(-8.764 * 10 ** (
            -4) * rectifier_current + 0.0324 * rectifier_diameter + 0.002 * rectifier_length - 1.2463, 2)
        self.rectifier_weight = abs(self.rectifier_weight)

        thyristor_current = float(self.iALineEdit_3.text())
        thyristor_diameter = float(self.dMmLineEdit_3.text())
        thyristor_length = float(self.LineEdit_2.text())
        self.thyristor_weight = round(-2.3512 * 10 * (
            -4) * thyristor_current + 0.0115 * thyristor_diameter + 0.0052 * thyristor_length - 1.1622, 2)
        self.thyristor_weight = abs(self.thyristor_weight)

        radiator_current = float(self.LineEdit_3.text())
        radiator_volume = float(self.LineEdit_4.text())
        self.radiator_weight = round(
            -1.2633 * 10 ** (-4) * radiator_current + 8.6328 * 10 ** (-7) * radiator_volume + 0.0198, 2)
        self.radiator_weight = abs(self.radiator_weight)

        inductance_current = float(self.iALineEdit.text())
        inductance_inductance = float(self.lHLineEdit.text())
        inductance_N1 = float(self.n1LineEdit.text())
        inductance_N2 = float(self.nLineEdit.text())
        inductance_n = float(self.nLineEdit_2.text())
        self.inductance_weight = round(0.0077 * inductance_current + 8.5944 * 10 * (
            -4) * inductance_inductance + 0.5917 * inductance_N1 - 0.1594 * inductance_N2 - 0.0286 * inductance_n + 1.5267,
                                       2)
        self.inductance_weight = abs(self.inductance_weight)

        self.breaker_weight = round(
            2 * self.capacitor_weight * k1 + 2 * self.rectifier_weight * k2 + self.thyristor_weight * k3 + 3 * self.radiator_weight * k4 + 2 * self.inductance_weight * k5,
            2)

    def calculateBreakerSimply(self):
        k1 = 1
        k2 = 1
        k3 = 1
        k4 = 1
        k5 = 1
        voltage = float(self.simpleBreakerVoltageLineEdit.text())
        current = float(self.simpleBreakerCurrentLineEdit.text())
        capacitor = float(self.simpleBreakerCapacitorLineEdit.text())
        inductance = float(self.simpleBreakerIndutanceLineEdit.text())

        self.capacitor_weight = 0.0058 * voltage + 6.1450 * 10 ** (
            -5) * voltage ** 2 + 0.1373 * capacitor - 2.0138 * 10 ** (
                                    -4) * capacitor ** 2 - 11.3285
        self.capacitor_weight = abs(round(self.capacitor_weight, 2))
        self.rectifier_weight = 1.0611 * 10 ** (-4) * current + 5.4683 * 10 ** (-6) * current ** 2 + 0.0797
        self.rectifier_weight = abs(round(self.rectifier_weight, 2))
        self.thyristor_weight = -9.1253 * 10 ** (-4) * current + 7.2273 * 10 ** (-6) * current ** 2 + 0.1258
        self.thyristor_weight = abs(round(self.thyristor_weight, 2))
        self.radiator_weight = 0.0019 * current + 0.0347
        self.radiator_weight = abs(round(self.radiator_weight, 2))
        self.inductance_weight = 1.819 * 10 ** (-4) * current - 0.0114 * inductance + 5.8416 * 10 ** (
            -6) * inductance ** 2 + 8.6721 * 10 ** (-5) * current * inductance + 4.1383
        self.inductance_weight = abs(round(self.inductance_weight, 2))
        self.breaker_weight = round(
            2 * self.capacitor_weight * k1 + 2 * self.rectifier_weight * k2 + self.thyristor_weight * k3 + 3 * self.radiator_weight * k4 + 2 * self.inductance_weight * k5,
            2)

    def calculateConverterComplexly(self):
        k1 = 1
        k2 = 1
        k3 = 1
        k4 = 1
        capacitor1_voltage = float(self.convertorC1VoltageLineEdit.text())
        capacitor1_capacitor = float(self.convertorC1CcapacitorLineEdit.text())
        capacitor1_diameter = float(self.convertorC1DiameterLineEdit.text())
        capacitor1_length = float(self.convertorC1DiameterLineEdit.text())
        self.capacitor1_weight = abs(round((
                                                   -0.0094 * capacitor1_voltage - 0.0204 * capacitor1_capacitor + 0.6208 * capacitor1_diameter + 0.5524 * capacitor1_length - 7.9299) * 10 ** (
                                               -3), 2))

        capacitor2_voltage = float(self.convertorC1VoltageLineEdit_4.text())
        capacitor2_capacitor = float(self.convertorC1CcapacitorLineEdit_4.text())
        capacitor2_diameter = float(self.convertorC1DiameterLineEdit_4.text())
        capacitor2_length = float(self.convertorC1DiameterLineEdit_4.text())
        self.capacitor2_weight = abs(round((
                                                   -0.0094 * capacitor2_voltage - 0.0204 * capacitor2_capacitor + 0.6208 * capacitor2_diameter + 0.5524 * capacitor2_length - 7.9299) * 10 ** (
                                               -3), 2))

        inductance_current = float(self.iALineEdit_4.text())
        inductance_inductance = float(self.lHLineEdit_2.text())
        inductance_N1 = float(self.n1LineEdit_2.text())
        inductance_N2 = float(self.nLineEdit_3.text())
        inductance_n = float(self.nLineEdit_4.text())
        self.inductance_weight = abs(round((0.0077 * inductance_current + 8.5944 * 10 ** (
            -4) * inductance_inductance + 0.5917 * inductance_N1 - 0.1594 * inductance_N2 - 0.0286 * inductance_n + 1.5276),
                                           2))

        radiator_current = float(self.LineEdit_5.text())
        radiator_voltage = float(self.LineEdit_6.text())
        self.radiator1_weight = abs(
            round((-1.2633 * 10 ** (-4) * radiator_current + 8.6328 * 10 ** (-7) * radiator_voltage), 2))

        self.converter_weight = round(
            self.capacitor1_weight * k1 + self.capacitor2_weight * k2 + 2 * self.inductance1_weight * k3 + 4 * self.radiator1_weight * k4 + 1.28,
            2)

    def calculateConverterSimply(self):
        k1 = 1
        k2 = 1
        k3 = 1
        k4 = 1
        voltage = float(self.simpleConvertorVoltageLineEdit.text())
        current = float(self.simpleConvertorCurrentLineEdit.text())
        c1 = float(self.simpleConvertorCap1LineEdit.text())
        c2 = float(self.simpleConvertorCap2LineEdit.text())
        inductance = float(self.simpleConvertorInductanceLineEdit.text())
        self.capacitor1_weight = 10 ** (-3) * (
                0.0058 * voltage + 6.1450 * 10 ** (-5) * voltage ** 2 + 0.1373 * c1 - 2.0138 * 10 ** (
            -4) * c1 ** 2 - 11.3285)
        self.capacitor2_weight = 10 ** (-3) * (
                0.0058 * voltage + 6.1450 * 10 ** (-5) * voltage ** 2 + 0.1373 * c2 - 2.0138 * 10 ** (
            -4) * c2 ** 2 - 11.3285)
        self.inductance1_weight = 1.819 * 10 ** (-4) * current - 0.0114 * inductance + 5.8416 * 10 ** (
            -6) * inductance ** 2 + 8.672 * 10 ** (-5) * current * inductance + 4.1383
        self.radiator1_weight = 0.0019 * current + 0.0347
        self.converter_weight = round(
            self.capacitor1_weight * k1 + self.capacitor2_weight * k2 + 2 * self.inductance1_weight * k3 + 4 * self.radiator1_weight*k4 + 1.28)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    myWin = MyMainWindow()
    myWin.show()
    sys.exit(app.exec_())
# TODO:
# 1. 调色
# 2. 设置大小布局，目前label显示不全
# 3. 插入饼形图
# 4. page_2和page_3添加qchartview和tablewidget， 关联确定button展示表格和饼图